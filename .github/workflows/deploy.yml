name: Deploy to Self-hosted Runner

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: self-hosted

    env:
      BOT_NAME: ${{ vars.BOT_NAME || 'calendar-bot' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 在构建 Docker 镜像之前设置凭据
      - name: Set up credentials
        env:
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_PROJECT_ID: ${{ secrets.GOOGLE_PROJECT_ID }}
        run: |
          echo "{\"installed\":{\"client_id\":\"$GOOGLE_CLIENT_ID\",\"project_id\":\"$GOOGLE_PROJECT_ID\",\"auth_uri\":\"https://accounts.google.com/o/oauth2/auth\",\"token_uri\":\"https://oauth2.googleapis.com/token\",\"auth_provider_x509_cert_url\":\"https://www.googleapis.com/oauth2/v1/certs\",\"client_secret\":\"$GOOGLE_CLIENT_SECRET\",\"redirect_uris\":[\"http://localhost\"]}}" > credentials.json

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build Docker image
        run: |
          IMAGE_NAME="${BOT_NAME}:latest"
          echo "Building Docker image: $IMAGE_NAME"
          docker build -t $IMAGE_NAME .

      - name: Stop and remove old Docker container
        run: |
          echo "Checking container: $BOT_NAME"
          if docker ps -a --format '{{.Names}}' | grep -q "^${BOT_NAME}$"; then
            echo "Stopping and removing existing container..."
            docker stop ${BOT_NAME} || true
            docker rm ${BOT_NAME} || true
          else
            echo "No existing container found"
          fi

      - name: Run Docker container
        run: |
          IMAGE_NAME="${BOT_NAME}:latest"
          echo "Starting container: $BOT_NAME with image: $IMAGE_NAME"
          docker run -d \
            --name ${BOT_NAME} \
            --restart unless-stopped \
            -v /root/data/${BOT_NAME}:/app/data \
            -e BOT_NAME=${BOT_NAME} \
            -e GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }} \
            -e GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }} \
            -e GOOGLE_PROJECT_ID=${{ secrets.GOOGLE_PROJECT_ID }} \
            -p 8009:8009 \
            --cpus="0.30" \
            ${IMAGE_NAME}

      - name: Verify container is running
        run: |
          sleep 10
          if [ "$(docker ps -q -f name=${BOT_NAME})" ]; then
            echo "Container ${BOT_NAME} is running"
          else
            echo "Container ${BOT_NAME} failed to start"
            docker logs ${BOT_NAME}
            exit 1
          fi